from django.contrib.auth.models import User
from django.contrib.auth.hashers import check_password
from django.views.decorators.csrf import csrf_exempt
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from .serializers import CabinetClickLogSerializer

@api_view(['POST'])
def track_cabinet_click(request):
    serializer = CabinetClickLogSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    else:
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
TEMP_CREDENTIALS = {"username": None, "password": None}

@api_view(['GET'])
def latest_user(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID).
    """
    try:
        user = User.objects.latest('id')
        return Response({
            "username": user.username,
            "email": user.email
        })
    except User.DoesNotExist:
        return Response({"detail": "No users found"}, status=404)

@csrf_exempt
@api_view(['POST'])
def login(request):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    username = request.data.get("username")
    password = request.data.get("password")

    print(f"\nüîå –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:")
    print(f"    ‚û§ username: {username}")
    print(f"    ‚û§ password: {password}")

    if not username or not password:
        print("‚õî –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return Response(False, status=400)

    try:
        user = User.objects.get(username=username)
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è {username}:")
        print(f"    ‚û§ username: {user.username}")
        print(f"    ‚û§ hashed password (–∏–∑ –±–∞–∑—ã): {user.password}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤—Ä—É—á–Ω—É—é
        if check_password(password, user.password):
            print("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç (check_password)")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            TEMP_CREDENTIALS["username"] = username
            TEMP_CREDENTIALS["password"] = password

            return Response(True)
        else:
            print("‚ùå –ü–∞—Ä–æ–ª—å –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç (check_password)")
            return Response(False, status=401)

    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return Response(False, status=401)

@api_view(['GET'])
def get_credentials(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –æ–±–Ω—É–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    if TEMP_CREDENTIALS["username"] and TEMP_CREDENTIALS["password"]:
        creds = TEMP_CREDENTIALS.copy()
        TEMP_CREDENTIALS["username"] = None
        TEMP_CREDENTIALS["password"] = None
        return Response(creds)
    else:
        return Response({"detail": "No credentials available"}, status=404)
